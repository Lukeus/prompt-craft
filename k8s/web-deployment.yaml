apiVersion: apps/v1
kind: Deployment
metadata:
  name: prompt-craft-web
  namespace: prompt-craft
  labels:
    app.kubernetes.io/name: prompt-craft
    app.kubernetes.io/component: web
    app.kubernetes.io/part-of: prompt-craft
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prompt-craft
      app.kubernetes.io/component: web
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prompt-craft
        app.kubernetes.io/component: web
        app.kubernetes.io/part-of: prompt-craft
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: web
        image: prompt-craft:latest  # Replace with your actual image
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        # Configuration from ConfigMap
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: prompt-craft-config
              key: NODE_ENV
        - name: PLATFORM_TYPE
          valueFrom:
            configMapKeyRef:
              name: prompt-craft-config
              key: PLATFORM_TYPE
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: prompt-craft-config
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: prompt-craft-config
              key: DATABASE_PORT
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: prompt-craft-config
              key: DATABASE_NAME
        - name: REPOSITORY_TYPE
          valueFrom:
            configMapKeyRef:
              name: prompt-craft-config
              key: REPOSITORY_TYPE
        # Secrets
        - name: DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
              name: prompt-craft-secrets
              key: database-username
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: prompt-craft-secrets
              key: database-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: prompt-craft-secrets
              key: jwt-secret
        # Kubernetes-specific
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBERNETES_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KUBERNETES_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        # Database URL construction
        - name: DATABASE_URL
          value: "postgresql://$(DATABASE_USERNAME):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)?sslmode=require"
        
        # Resource limits and requests
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 512Mi
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Startup probe for slower initialization
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30  # Allow up to 5 minutes for startup
        
        # Volume mounts
        volumeMounts:
        - name: prompts-storage
          mountPath: /app/prompts
        - name: logs-storage
          mountPath: /app/logs
        - name: temp-storage
          mountPath: /tmp
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Set to true if app supports it
          capabilities:
            drop:
            - ALL
      
      # Volumes
      volumes:
      - name: prompts-storage
        persistentVolumeClaim:
          claimName: prompt-craft-prompts-pvc
      - name: logs-storage
        persistentVolumeClaim:
          claimName: prompt-craft-logs-pvc
      - name: temp-storage
        emptyDir: {}
      
      # Node selection and affinity
      nodeSelector:
        kubernetes.io/os: linux
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - prompt-craft
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - web
              topologyKey: kubernetes.io/hostname
      
      # Restart policy
      restartPolicy: Always
      
      # Termination grace period
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: prompt-craft-web-service
  namespace: prompt-craft
  labels:
    app.kubernetes.io/name: prompt-craft
    app.kubernetes.io/component: web
    app.kubernetes.io/part-of: prompt-craft
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: prompt-craft
    app.kubernetes.io/component: web

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prompt-craft-web-ingress
  namespace: prompt-craft
  labels:
    app.kubernetes.io/name: prompt-craft
    app.kubernetes.io/component: web
    app.kubernetes.io/part-of: prompt-craft
  annotations:
    # NGINX Ingress Controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-requests-per-second: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    # Body size
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    # SSL
    cert-manager.io/cluster-issuer: "letsencrypt-prod"  # If using cert-manager
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - prompt-craft.example.com  # Replace with your domain
    secretName: prompt-craft-tls
  rules:
  - host: prompt-craft.example.com  # Replace with your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prompt-craft-web-service
            port:
              number: 80