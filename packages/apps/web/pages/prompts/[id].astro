---
import Layout from '../../layouts/Layout.astro';
import PromptRenderer from '../../components/PromptRenderer.astro';

const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/prompts');
}

// Fetch the prompt data
let prompt = null;
let error = null;

try {
  const response = await fetch(`${Astro.url.origin}/api/prompts/${id}`);
  if (response.ok) {
    prompt = await response.json();
  } else if (response.status === 404) {
    error = 'Prompt not found';
  } else {
    error = 'Failed to load prompt';
  }
} catch (err) {
  console.error('Error fetching prompt:', err);
  error = 'Failed to load prompt';
}

if (error) {
  return Astro.redirect('/prompts?error=' + encodeURIComponent(error));
}

// Format the date for display
const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};

// Get category color
const getCategoryColor = (category: string) => {
  switch (category) {
    case 'work':
      return 'bg-primary-600 text-white hover:bg-primary-700';
    case 'personal':
      return 'bg-accent-600 text-white hover:bg-accent-700';
    case 'shared':
      return 'bg-success-600 text-white hover:bg-success-700';
    default:
      return 'bg-dark-600 text-white hover:bg-dark-700';
  }
};
---

<Layout title={`${prompt?.name || 'Prompt'} - Prompt Craft`}>
  {prompt && (
    <div class="max-w-4xl mx-auto">
      <!-- Header Section -->
      <div class="mb-8">
        <div class="flex items-center space-x-4 text-sm text-gray-400 mb-4">
          <a href="/prompts" class="hover:text-primary-400 transition-colors">
            ‚Üê Back to Prompts
          </a>
          <span>/</span>
          <span class="text-gray-100 font-medium">{prompt.name}</span>
        </div>
        
        <div class="flex items-start justify-between">
          <div class="flex-1 min-w-0">
            <h1 class="text-3xl font-bold text-gray-100 mb-4">
              {prompt.name}
            </h1>
            <p class="text-lg text-gray-300 mb-6">
              {prompt.description}
            </p>
          </div>
          
          <div class="flex items-center space-x-3 ml-6">
            <span class={`px-3 py-1 text-sm font-semibold rounded-full uppercase tracking-wide transition-colors duration-200 cursor-pointer ${getCategoryColor(prompt.category)}`}>
              {prompt.category}
            </span>
            <div class="flex items-center space-x-2">
              <a 
                href={`/prompts/${prompt.id}/edit`}
                class="btn-secondary"
              >
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
                Edit
              </a>
              <button 
                onclick={`deletePrompt('${prompt.id}')`}
                class="btn-danger"
              >
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
                Delete
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Prompt Testing Interface - Above Tabs for Better UX -->
      <div class="mb-8">
        {prompt && <PromptRenderer prompt={prompt} />}
      </div>

      <!-- Tabbed Interface -->
      <div class="space-y-6">
        <!-- Tab Navigation -->
        <div class="border-b border-dark-700/50">
          <nav class="-mb-px flex space-x-8">
            <button 
              class="tab-button active" 
              data-tab="content"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              Content
            </button>
            <button 
              class="tab-button" 
              data-tab="details"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              Details
            </button>
            {prompt.variables && prompt.variables.length > 0 && (
              <button 
                class="tab-button" 
                data-tab="variables"
              >
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z"></path>
                </svg>
                Variables ({prompt.variables.length})
              </button>
            )}
            {prompt.tags && prompt.tags.length > 0 && (
              <button 
                class="tab-button" 
                data-tab="tags"
              >
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                </svg>
                Tags ({prompt.tags.length})
              </button>
            )}
          </nav>
        </div>

        <!-- Tab Content -->
        <div class="tab-content-container">
          <!-- Content Tab -->
          <div id="content-tab" class="tab-content active">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
              <div class="lg:col-span-2 space-y-6">
                <!-- Prompt Content -->
                <div class="card">
                  <div class="card-header">
                    <h2 class="card-title">
                      <svg class="w-5 h-5 mr-2 text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                      </svg>
                      Prompt Template
                    </h2>
                  </div>
                  
                  <div class="bg-dark-800/50 border border-dark-700/30 rounded-lg p-6 font-mono text-sm whitespace-pre-wrap text-gray-300">
                    {prompt.content}
                  </div>
                </div>
              </div>
              <div class="lg:col-span-1">
                <!-- Quick Info -->
                <div class="card">
                  <div class="card-header">
                    <h3 class="card-title text-base">Quick Info</h3>
                  </div>
                  <dl class="space-y-3">
                    <div>
                      <dt class="text-sm font-medium text-gray-300">Category</dt>
                      <dd class="text-sm text-gray-100 mt-1">
                        <span class={`px-2 py-1 text-xs font-semibold rounded-full uppercase tracking-wide ${getCategoryColor(prompt.category)}`}>
                          {prompt.category}
                        </span>
                      </dd>
                    </div>
                    <div>
                      <dt class="text-sm font-medium text-gray-300">Updated</dt>
                      <dd class="text-sm text-gray-100 mt-1">{formatDate(prompt.updatedAt)}</dd>
                    </div>
                    {prompt.variables && (
                      <div>
                        <dt class="text-sm font-medium text-gray-300">Variables</dt>
                        <dd class="text-sm text-gray-100 mt-1">{prompt.variables.length} defined</dd>
                      </div>
                    )}
                  </dl>
                </div>
              </div>
            </div>
          </div>

          <!-- Details Tab -->
          <div id="details-tab" class="tab-content">
            <div class="max-w-2xl">
              <div class="card">
                <div class="card-header">
                  <h3 class="card-title">Detailed Information</h3>
                </div>
                
                <dl class="space-y-6">
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <dt class="text-sm font-medium text-gray-300">Created</dt>
                      <dd class="text-base text-gray-100 mt-2">{formatDate(prompt.createdAt)}</dd>
                    </div>
                    <div>
                      <dt class="text-sm font-medium text-gray-300">Last Updated</dt>
                      <dd class="text-base text-gray-100 mt-2">{formatDate(prompt.updatedAt)}</dd>
                    </div>
                  </div>
                  {prompt.author && (
                    <div>
                      <dt class="text-sm font-medium text-gray-300">Author</dt>
                      <dd class="text-base text-gray-100 mt-2">{prompt.author}</dd>
                    </div>
                  )}
                  {prompt.version && (
                    <div>
                      <dt class="text-sm font-medium text-gray-300">Version</dt>
                      <dd class="text-base text-gray-100 mt-2 font-mono">{prompt.version}</dd>
                    </div>
                  )}
                  <div>
                    <dt class="text-sm font-medium text-gray-300">Category</dt>
                    <dd class="mt-2">
                      <span class={`px-3 py-1 text-sm font-semibold rounded-full uppercase tracking-wide transition-colors duration-200 cursor-pointer ${getCategoryColor(prompt.category)}`}>
                        {prompt.category}
                      </span>
                    </dd>
                  </div>
                  <div>
                    <dt class="text-sm font-medium text-gray-300">Description</dt>
                    <dd class="text-base text-gray-100 mt-2 leading-relaxed">{prompt.description}</dd>
                  </div>
                </dl>
              </div>
            </div>
          </div>

          <!-- Variables Tab -->
          {prompt.variables && prompt.variables.length > 0 && (
            <div id="variables-tab" class="tab-content">
              <div class="space-y-6">
                <div class="flex items-center justify-between">
                  <h3 class="text-xl font-semibold text-gray-100">Variables</h3>
                  <span class="text-sm text-gray-400">{prompt.variables.length} variable{prompt.variables.length !== 1 ? 's' : ''} defined</span>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {prompt.variables.map((variable: any) => (
                    <div key={variable.name} class="card">
                      <div class="p-4">
                        <div class="flex items-center justify-between mb-3">
                          <code class="text-base font-mono bg-dark-800 text-primary-300 px-3 py-1 rounded">
                            {`{{${variable.name}}}`}
                          </code>
                          <div class="flex items-center space-x-2">
                            <span class={`variable-type ${variable.type}`}>
                              {variable.type}
                            </span>
                            {variable.required && (
                              <span class="text-red-400 text-xs font-bold bg-red-900/30 px-2 py-1 rounded">Required</span>
                            )}
                          </div>
                        </div>
                        {variable.description && (
                          <p class="text-sm text-gray-300 leading-relaxed">{variable.description}</p>
                        )}
                        {variable.defaultValue && (
                          <div class="mt-2">
                            <span class="text-xs text-gray-400">Default: </span>
                            <code class="text-xs bg-dark-700 text-gray-300 px-2 py-1 rounded">{variable.defaultValue}</code>
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          <!-- Tags Tab -->
          {prompt.tags && prompt.tags.length > 0 && (
            <div id="tags-tab" class="tab-content">
              <div class="space-y-6">
                <div class="flex items-center justify-between">
                  <h3 class="text-xl font-semibold text-gray-100">Tags</h3>
                  <span class="text-sm text-gray-400">{prompt.tags.length} tag{prompt.tags.length !== 1 ? 's' : ''}</span>
                </div>
                
                <div class="card">
                  <div class="p-6">
                    <div class="flex flex-wrap gap-3">
                      {prompt.tags.map((tag: string) => (
                        <span key={tag} class="inline-flex items-center px-4 py-2 text-sm font-medium bg-primary-900/30 text-primary-300 rounded-full border border-primary-700/30 hover:bg-primary-800/40 transition-colors duration-150 cursor-pointer">
                          <svg class="w-3 h-3 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                          </svg>
                          #{tag}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )}
</Layout>

<!-- Styles -->
<style>
  /* Card Components */
  .card {
    @apply glass-card rounded-xl shadow-lg overflow-hidden;
  }
  
  .card-header {
    @apply px-6 py-4 border-b border-dark-700/30 bg-dark-800/30;
  }
  
  .card-title {
    @apply flex items-center text-lg font-semibold text-gray-100;
  }
  
  .card > div:not(.card-header) {
    @apply p-6;
  }

  /* Button Styles */
  .btn-secondary {
    @apply inline-flex items-center px-4 py-2 border border-dark-600 text-sm font-medium rounded-lg;
    @apply text-gray-300 bg-dark-800/50 hover:bg-dark-700/60 transition-all duration-200;
    @apply focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500;
  }
  
  .btn-danger {
    @apply inline-flex items-center px-4 py-2 border border-red-700/50 text-sm font-medium rounded-lg;
    @apply text-red-300 bg-red-900/30 hover:bg-red-800/40 transition-all duration-200;
    @apply focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500;
  }

  /* Tag Styles */
  .tag-pill {
    @apply inline-flex items-center px-3 py-1 text-sm font-medium;
    @apply bg-primary-900/30 text-primary-300 rounded-full border border-primary-700/30;
    @apply hover:bg-primary-800/40 transition-colors duration-150;
  }

  /* Variable Styles */
  .variable-item {
    @apply p-3 bg-dark-800/30 rounded-lg border border-dark-700/50;
  }
  
  .variable-type {
    @apply px-2 py-1 text-xs font-medium rounded-full uppercase;
  }
  
  .variable-type.string {
    @apply bg-primary-900/30 text-primary-300;
  }
  
  .variable-type.number {
    @apply bg-success-900/30 text-success-300;
  }
  
  .variable-type.boolean {
    @apply bg-accent-900/30 text-accent-300;
  }
  
  .variable-type.array {
    @apply bg-warning-900/30 text-warning-300;
  }

  /* Tab Styles */
  .tab-button {
    @apply flex items-center px-3 py-2 border-b-2 border-transparent text-sm font-medium text-gray-400;
    @apply hover:text-gray-300 hover:border-dark-600 transition-all duration-200;
    @apply focus:outline-none focus:text-primary-400 focus:border-primary-500;
  }
  
  .tab-button.active {
    @apply text-primary-400 border-primary-500;
  }
  
  .tab-content {
    @apply hidden;
  }
  
  .tab-content.active {
    @apply block;
  }
  
  .tab-content-container {
    @apply min-h-96;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .btn-secondary, .btn-danger {
      @apply px-3 py-2 text-xs;
    }
    
    .tab-button {
      @apply px-2 py-2 text-xs;
    }
    
    .tab-button svg {
      @apply w-3 h-3 mr-1;
    }
  }
</style>

<!-- JavaScript for delete functionality -->
<script define:vars={{ promptId: prompt?.id }}>
  function deletePrompt(id) {
    if (confirm('Are you sure you want to delete this prompt? This action cannot be undone.')) {
      fetch(`/api/prompts/${id}`, { method: 'DELETE' })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            window.location.href = '/prompts?deleted=true';
          } else {
            alert('Failed to delete prompt: ' + (data.error || 'Unknown error'));
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Failed to delete prompt');
        });
    }
  }
  
  // Make function globally available
  window.deletePrompt = deletePrompt;
  
  // Tab functionality
  document.addEventListener('DOMContentLoaded', () => {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');
    
    // Add click event listeners to tab buttons
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const targetTab = button.getAttribute('data-tab');
        
        // Remove active class from all buttons and contents
        tabButtons.forEach(btn => btn.classList.remove('active'));
        tabContents.forEach(content => content.classList.remove('active'));
        
        // Add active class to clicked button and corresponding content
        button.classList.add('active');
        const targetContent = document.getElementById(`${targetTab}-tab`);
        if (targetContent) {
          targetContent.classList.add('active');
        }
        
        // Smooth scroll to top of tab content
        document.querySelector('.tab-content-container').scrollIntoView({ 
          behavior: 'smooth', 
          block: 'start' 
        });
      });
    });
    
    // Add keyboard navigation for tabs
    tabButtons.forEach((button, index) => {
      button.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') {
          e.preventDefault();
          const nextIndex = e.key === 'ArrowRight' 
            ? (index + 1) % tabButtons.length 
            : (index - 1 + tabButtons.length) % tabButtons.length;
          
          tabButtons[nextIndex].click();
          tabButtons[nextIndex].focus();
        }
      });
    });
  });
</script>