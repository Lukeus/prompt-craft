---
import Layout from '../layouts/Layout.astro';
---

<Layout title="MCP Server - Web-Accessible AI Integration">
  <!-- Hero Section -->
  <div class="mb-12 text-center">
    <div class="animate-slide-up">
      <h1 class="text-4xl sm:text-5xl lg:text-6xl font-bold text-balance mb-6">
        <span class="bg-gradient-to-r from-blue-400 via-purple-400 to-blue-600 bg-clip-text text-transparent">
          MCP Server
        </span>
        <span class="bg-gradient-to-r from-gray-100 via-primary-300 to-accent-400 bg-clip-text text-transparent">
          Integration
        </span>
      </h1>
      
      <p class="text-xl text-gray-200 max-w-4xl mx-auto text-balance leading-relaxed mb-4">
        Web-accessible Model Context Protocol server with multiple transport options
      </p>
      <p class="text-lg text-gray-400 max-w-4xl mx-auto text-balance leading-relaxed">
        Connect your AI assistants via <span class="text-blue-400 font-medium">HTTP</span>, 
        <span class="text-purple-400 font-medium">WebSocket</span>, or 
        <span class="text-green-400 font-medium">REST API</span>
      </p>
    </div>
  </div>

  <!-- Server Status -->
  <div class="glass-card rounded-xl shadow-xl p-8 mb-12">
    <h2 class="text-xl font-bold text-gray-100 mb-6">Server Status</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      <div class="glass-light rounded-lg p-4">
        <div class="flex items-center space-x-3">
          <div class="w-10 h-10 bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
          </div>
          <div>
            <p class="text-lg font-bold text-gray-100">Active</p>
            <p class="text-xs text-gray-400">Available Prompts</p>
          </div>
        </div>
      </div>
      
      <div class="glass-light rounded-lg p-4">
        <div class="flex items-center space-x-3">
          <div class="w-10 h-10 bg-gradient-to-br from-purple-500 to-purple-600 rounded-lg flex items-center justify-center">
            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z"></path>
            </svg>
          </div>
          <div>
            <p class="text-lg font-bold text-gray-100">Ready</p>
            <p class="text-xs text-gray-400">MCP Tools</p>
          </div>
        </div>
      </div>
      
      <div class="glass-light rounded-lg p-4">
        <div class="flex items-center space-x-3">
          <div class="w-10 h-10 bg-gradient-to-br from-green-500 to-green-600 rounded-lg flex items-center justify-center">
            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
            </svg>
          </div>
          <div>
            <p class="text-lg font-bold text-gray-100">3</p>
            <p class="text-xs text-gray-400">Transport Methods</p>
          </div>
        </div>
      </div>
      
      <div class="glass-light rounded-lg p-4">
        <div class="flex items-center space-x-3">
          <div class="w-10 h-10 bg-gradient-to-br from-orange-500 to-orange-600 rounded-lg flex items-center justify-center">
            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
            </svg>
          </div>
          <div>
            <p class="text-lg font-bold text-gray-100">Multiple</p>
            <p class="text-xs text-gray-400">Categories</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Transport Methods -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12">
    <div class="glass-card rounded-xl shadow-lg p-6">
      <div class="flex items-center space-x-4 mb-4">
        <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-md">
          <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
          </svg>
        </div>
        <div>
          <h3 class="text-lg font-bold text-gray-100">HTTP MCP</h3>
          <p class="text-sm text-gray-400">JSON-RPC 2.0 over HTTP</p>
        </div>
      </div>
      
      <p class="text-gray-300 mb-4">Standard MCP protocol with HTTP requests. Perfect for web applications and serverless functions.</p>
      
      <div class="space-y-2 mb-4">
        <div class="flex items-center space-x-3 text-sm">
          <span class="px-2 py-1 bg-green-600/20 text-green-300 rounded font-mono text-xs">GET</span>
          <span class="text-gray-300 font-mono text-sm">/api/mcp/tools</span>
        </div>
        <div class="flex items-center space-x-3 text-sm">
          <span class="px-2 py-1 bg-blue-600/20 text-blue-300 rounded font-mono text-xs">POST</span>
          <span class="text-gray-300 font-mono text-sm">/api/mcp/call</span>
        </div>
      </div>
    </div>

    <div class="glass-card rounded-xl shadow-lg p-6">
      <div class="flex items-center space-x-4 mb-4">
        <div class="w-12 h-12 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl flex items-center justify-center shadow-md">
          <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2m-9 0h10M7 4v16a2 2 0 002 2h6a2 2 0 002-2V4M7 4H5a2 2 0 00-2 2v14a2 2 0 002 2h2"></path>
          </svg>
        </div>
        <div>
          <h3 class="text-lg font-bold text-gray-100">WebSocket MCP</h3>
          <p class="text-sm text-gray-400">Real-time bidirectional</p>
        </div>
      </div>
      
      <p class="text-gray-300 mb-4">Real-time communication with persistent connections. Ideal for interactive AI assistants.</p>
      <div class="p-3 bg-amber-900/20 border border-amber-600/30 rounded-lg mb-4">
        <p class="text-xs text-amber-300">⚠️ Note: WebSockets require persistent server connections and are not supported in serverless deployments like Vercel. Use HTTP MCP for production.</p>
      </div>
      
      <div class="space-y-2 mb-4">
        <div class="flex items-center space-x-3 text-sm">
          <span class="px-2 py-1 bg-purple-600/20 text-purple-300 rounded font-mono text-xs">WS</span>
          <span class="text-gray-300 font-mono text-sm">/api/mcp/ws</span>
        </div>
        <div class="text-xs text-gray-500">JSON-RPC 2.0 messages</div>
      </div>
    </div>

    <div class="glass-card rounded-xl shadow-lg p-6">
      <div class="flex items-center space-x-4 mb-4">
        <div class="w-12 h-12 bg-gradient-to-br from-green-500 to-green-600 rounded-xl flex items-center justify-center shadow-md">
          <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4"></path>
          </svg>
        </div>
        <div>
          <h3 class="text-lg font-bold text-gray-100">REST API</h3>
          <p class="text-sm text-gray-400">Simple HTTP endpoints</p>
        </div>
      </div>
      
      <p class="text-gray-300 mb-4">Simplified REST endpoints for easy integration. Great for quick prototyping and testing.</p>
      
      <div class="space-y-2 mb-4">
        <div class="flex items-center space-x-3 text-sm">
          <span class="px-2 py-1 bg-blue-600/20 text-blue-300 rounded font-mono text-xs">POST</span>
          <span class="text-gray-300 font-mono text-sm">/api/mcp/render</span>
        </div>
        <div class="text-xs text-gray-500">Direct prompt rendering</div>
      </div>
    </div>
  </div>

  <!-- Interactive Testing Section -->
  <div class="glass-card rounded-xl shadow-xl p-8 mb-12">
    <div class="flex items-center justify-between mb-6">
      <div>
        <h2 class="text-xl font-bold text-gray-100 flex items-center">
          <svg class="w-6 h-6 mr-2 text-accent-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
          </svg>
          Live MCP Testing
        </h2>
        <p class="text-sm text-gray-400 mt-1">Test all MCP transport methods directly in your browser</p>
      </div>
      <div class="flex items-center">
        <div class="w-2 h-2 bg-gray-500 rounded-full" id="connection-indicator"></div>
        <span class="text-xs text-gray-400 ml-2" id="connection-status">Ready to test</span>
      </div>
    </div>

    <!-- Test Interface -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      <!-- Input Panel -->
      <div class="space-y-6">
        <div>
          <label class="block text-sm font-medium text-gray-200 mb-2">Transport Method</label>
          <select id="transport-select" class="w-full px-3 py-2 bg-dark-800/50 border border-dark-600/50 rounded-lg text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500">
            <option value="http">HTTP MCP (JSON-RPC)</option>
            <option value="websocket">WebSocket MCP</option>
            <option value="rest">REST API</option>
          </select>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-200 mb-2">Test Action</label>
          <select id="action-select" class="w-full px-3 py-2 bg-dark-800/50 border border-dark-600/50 rounded-lg text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500">
            <option value="list_tools">List Available Tools</option>
            <option value="search_prompts">Search Prompts</option>
            <option value="list_categories">List Categories</option>
            <option value="render_prompt">Render Specific Prompt</option>
          </select>
        </div>

        <div id="parameters-section" class="space-y-4">
          <div id="search-params" class="hidden">
            <label class="block text-sm font-medium text-gray-200 mb-2">Search Query</label>
            <input type="text" id="search-query" placeholder="Enter search terms..." class="w-full px-3 py-2 bg-dark-800/50 border border-dark-600/50 rounded-lg text-gray-200 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-primary-500">
            
            <label class="block text-sm font-medium text-gray-200 mb-2 mt-4">Limit Results</label>
            <input type="number" id="search-limit" value="5" min="1" max="20" class="w-full px-3 py-2 bg-dark-800/50 border border-dark-600/50 rounded-lg text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500">
          </div>
          
          <div id="render-params" class="hidden">
            <label class="block text-sm font-medium text-gray-200 mb-2">Prompt ID</label>
            <input type="text" id="render-prompt-id" placeholder="Enter prompt ID..." class="w-full px-3 py-2 bg-dark-800/50 border border-dark-600/50 rounded-lg text-gray-200 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-primary-500">
            
            <label class="block text-sm font-medium text-gray-200 mb-2 mt-4">Variables (JSON)</label>
            <textarea id="render-variables" placeholder='{"key": "value"}' class="w-full px-3 py-2 bg-dark-800/50 border border-dark-600/50 rounded-lg text-gray-200 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-primary-500 resize-vertical" rows="3"></textarea>
          </div>
        </div>

        <button id="test-execute" class="btn-primary w-full">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 3l14 9-14 9V3z"></path>
          </svg>
          Execute Test
        </button>
      </div>

      <!-- Results Panel -->
      <div class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-200 mb-2">Request</label>
          <pre id="request-display" class="bg-dark-900/80 border border-dark-700/50 rounded-lg p-4 text-sm text-gray-300 font-mono overflow-auto" style="max-height: 300px;">Select an action to see the request</pre>
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-200 mb-2">Response</label>
          <pre id="response-display" class="bg-dark-900/80 border border-dark-700/50 rounded-lg p-4 text-sm text-gray-300 font-mono overflow-auto" style="max-height: 300px;">Execute a test to see the response</pre>
        </div>
      </div>
    </div>
  </div>

  <!-- Documentation -->
  <div class="text-center">
    <div class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-dark-800/50 to-dark-700/50 border border-dark-600/50 rounded-xl backdrop-blur-sm">
      <svg class="w-5 h-5 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
      </svg>
      <span class="text-sm text-gray-300">Full documentation available in</span>
      <code class="mx-2 px-2 py-1 bg-dark-900/50 rounded text-primary-400 font-mono text-xs">MCP_WEB_SERVER.md</code>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    new MCPTester();
  });

  class MCPTester {
    constructor() {
      this.setupEventListeners();
      this.updateRequestDisplay();
    }
    
    setupEventListeners() {
      const transportSelect = document.getElementById('transport-select');
      const actionSelect = document.getElementById('action-select');
      const executeBtn = document.getElementById('test-execute');
      
      if (transportSelect) {
        transportSelect.addEventListener('change', () => this.updateRequestDisplay());
      }
      if (actionSelect) {
        actionSelect.addEventListener('change', () => this.updateActionParams());
      }
      if (executeBtn) {
        executeBtn.addEventListener('click', () => this.executeTest());
      }
    }
    
    updateActionParams() {
      const action = document.getElementById('action-select')?.value;
      const searchParams = document.getElementById('search-params');
      const renderParams = document.getElementById('render-params');
      
      if (searchParams) searchParams.classList.add('hidden');
      if (renderParams) renderParams.classList.add('hidden');
      
      if (action === 'search_prompts' && searchParams) {
        searchParams.classList.remove('hidden');
      } else if (action === 'render_prompt' && renderParams) {
        renderParams.classList.remove('hidden');
      }
      
      this.updateRequestDisplay();
    }
    
    updateRequestDisplay() {
      const transport = document.getElementById('transport-select')?.value;
      const action = document.getElementById('action-select')?.value;
      const requestDisplay = document.getElementById('request-display');
      
      if (!requestDisplay || !transport || !action) return;
      
      let request = '';
      
      if (transport === 'http') {
        request = this.generateHTTPRequest(action);
      } else if (transport === 'websocket') {
        request = this.generateWebSocketRequest(action);
      } else if (transport === 'rest') {
        request = this.generateRESTRequest(action);
      }
      
      requestDisplay.textContent = request;
    }
    
    generateHTTPRequest(action) {
      if (action === 'list_tools') {
        return 'GET /api/mcp/tools\nAccept: application/json';
      }
      
      const params = this.getActionParams(action);
      return `POST /api/mcp/call
Content-Type: application/json

${JSON.stringify({
        jsonrpc: '2.0',
        method: 'tools/call',
        params: {
          name: this.getToolName(action),
          arguments: params
        }
      }, null, 2)}`;
    }
    
    generateWebSocketRequest(action) {
      if (action === 'list_tools') {
        return JSON.stringify({
          jsonrpc: '2.0',
          id: 1,
          method: 'tools/list'
        }, null, 2);
      }
      
      const params = this.getActionParams(action);
      return JSON.stringify({
        jsonrpc: '2.0',
        id: 2,
        method: 'tools/call',
        params: {
          name: this.getToolName(action),
          arguments: params
        }
      }, null, 2);
    }
    
    generateRESTRequest(action) {
      if (action === 'render_prompt') {
        const promptId = document.getElementById('render-prompt-id')?.value || 'example-prompt-id';
        let variables = {};
        try {
          const variablesText = document.getElementById('render-variables')?.value || '{}';
          variables = JSON.parse(variablesText);
        } catch (e) {
          // Ignore JSON parse errors for display
        }
        
        return `POST /api/mcp/render
Content-Type: application/json

${JSON.stringify({
          promptId,
          variables
        }, null, 2)}`;
      }
      
      return 'REST API only supports render_prompt action';
    }
    
    getToolName(action) {
      switch (action) {
        case 'search_prompts': return 'prompt_search';
        case 'list_categories': return 'prompt_list_categories';
        case 'render_prompt': return 'prompt_example-id';
        default: return '';
      }
    }
    
    getActionParams(action) {
      switch (action) {
        case 'search_prompts':
          return {
            query: document.getElementById('search-query')?.value || 'example',
            limit: parseInt(document.getElementById('search-limit')?.value || '5')
          };
        case 'render_prompt':
          try {
            return JSON.parse(document.getElementById('render-variables')?.value || '{}');
          } catch (e) {
            return {};
          }
        default:
          return {};
      }
    }
    
    async executeTest() {
      const transport = document.getElementById('transport-select')?.value;
      const action = document.getElementById('action-select')?.value;
      const responseDisplay = document.getElementById('response-display');
      const connectionIndicator = document.getElementById('connection-indicator');
      const connectionStatus = document.getElementById('connection-status');
      
      if (!responseDisplay) return;
      
      if (connectionIndicator) {
        connectionIndicator.classList.remove('bg-gray-500', 'bg-green-500', 'bg-red-500');
        connectionIndicator.classList.add('bg-yellow-500');
      }
      if (connectionStatus) connectionStatus.textContent = 'Testing...';
      
      responseDisplay.textContent = 'Executing test...';
      
      try {
        let result;
        
        if (transport === 'http') {
          result = await this.executeHTTPTest(action);
        } else if (transport === 'websocket') {
          result = await this.executeWebSocketTest(action);
        } else if (transport === 'rest') {
          result = await this.executeRESTTest(action);
        }
        
        responseDisplay.textContent = JSON.stringify(result, null, 2);
        
        if (connectionIndicator) {
          connectionIndicator.classList.remove('bg-yellow-500');
          connectionIndicator.classList.add('bg-green-500');
        }
        if (connectionStatus) connectionStatus.textContent = 'Test successful';
        
      } catch (error) {
        responseDisplay.textContent = `Error: ${error.message}`;
        
        if (connectionIndicator) {
          connectionIndicator.classList.remove('bg-yellow-500');
          connectionIndicator.classList.add('bg-red-500');
        }
        if (connectionStatus) connectionStatus.textContent = 'Test failed';
      }
    }
    
    async executeHTTPTest(action) {
      if (action === 'list_tools') {
        const response = await fetch('/api/mcp/tools');
        return await response.json();
      }
      
      const params = this.getActionParams(action);
      let toolName = this.getToolName(action);
      
      if (action === 'render_prompt') {
        const promptId = document.getElementById('render-prompt-id')?.value;
        if (!promptId) throw new Error('Prompt ID is required for render_prompt');
        toolName = `prompt_${promptId}`;
      }
      
      const response = await fetch('/api/mcp/call', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          jsonrpc: '2.0',
          method: 'tools/call',
          params: {
            name: toolName,
            arguments: params
          }
        })
      });
      
      return await response.json();
    }
    
    async executeWebSocketTest(action) {
      return new Promise((resolve, reject) => {
        // Use secure WebSocket (wss://) for HTTPS sites, insecure (ws://) for HTTP
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const ws = new WebSocket(`${protocol}//${window.location.host}/api/mcp/ws`);
        
        ws.onopen = () => {
          const params = this.getActionParams(action);
          let message;
          
          if (action === 'list_tools') {
            message = {
              jsonrpc: '2.0',
              id: 1,
              method: 'tools/list'
            };
          } else {
            let toolName = this.getToolName(action);
            if (action === 'render_prompt') {
              const promptId = document.getElementById('render-prompt-id')?.value;
              if (!promptId) {
                reject(new Error('Prompt ID is required for render_prompt'));
                return;
              }
              toolName = `prompt_${promptId}`;
            }
            
            message = {
              jsonrpc: '2.0',
              id: 2,
              method: 'tools/call',
              params: {
                name: toolName,
                arguments: params
              }
            };
          }
          
          ws.send(JSON.stringify(message));
        };
        
        ws.onmessage = (event) => {
          const response = JSON.parse(event.data);
          ws.close();
          resolve(response);
        };
        
        ws.onerror = () => {
          reject(new Error('WebSocket connection failed. WebSockets are not supported in serverless deployments. Please use HTTP MCP transport instead.'));
        };
        
        ws.onclose = (event) => {
          if (event.code !== 1000) {
            reject(new Error('WebSocket connection closed unexpectedly'));
          }
        };
      });
    }
    
    async executeRESTTest(action) {
      if (action !== 'render_prompt') {
        throw new Error('REST API only supports render_prompt action');
      }
      
      const promptId = document.getElementById('render-prompt-id')?.value;
      if (!promptId) throw new Error('Prompt ID is required');
      
      let variables = {};
      try {
        const variablesText = document.getElementById('render-variables')?.value || '{}';
        variables = JSON.parse(variablesText);
      } catch (e) {
        throw new Error('Invalid JSON in variables field');
      }
      
      const response = await fetch('/api/mcp/render', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          promptId,
          variables
        })
      });
      
      return await response.json();
    }
  }
</script>
