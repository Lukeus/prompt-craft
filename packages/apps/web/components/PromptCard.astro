---
export interface Props {
  prompt: {
    id: string;
    name: string;
    description: string;
    category: string;
    tags: string[];
    createdAt: string;
    updatedAt: string;
    author?: string;
    variables?: Array<{
      name: string;
      description: string;
      type: string;
      required: boolean;
    }>;
  };
}

const { prompt } = Astro.props;

// Format the date for display
const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
};

// Get category color
const getCategoryColor = (category: string) => {
  switch (category) {
    case 'work':
      return 'work-badge';
    case 'personal':
      return 'personal-badge';
    case 'shared':
      return 'shared-badge';
    default:
      return 'default-badge';
  }
};
---

<div class="prompt-card group relative overflow-hidden">
  <div class="prompt-card-content p-6">
    <div class="flex items-start justify-between mb-4">
      <div class="flex-1 min-w-0">
        <div class="flex items-center space-x-2 mb-2">
          <h3 class="text-lg font-bold text-gray-100 group-hover:text-primary-300 transition-colors duration-200">
            <a href={`/prompts/${prompt.id}`} class="hover:underline">
              {prompt.name}
            </a>
          </h3>
          {prompt.variables && prompt.variables.some(v => v.required) && (
          <div class="flex items-center text-amber-400" title="Has required variables">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
            </svg>
          </div>
          )}
        </div>
        <p class="text-sm text-gray-300 mb-4 line-clamp-2 leading-relaxed font-medium">
          {prompt.description}
        </p>
      </div>
      <div class="ml-4 flex-shrink-0">
        <a href={`/prompts?category=${prompt.category}`} class={`category-badge ${getCategoryColor(prompt.category)} cursor-pointer`} title={`View all ${prompt.category} prompts`}>
          {prompt.category}
        </a>
      </div>
    </div>
    
    {prompt.tags && prompt.tags.length > 0 && (
      <div class="flex flex-wrap gap-2 mb-4">
        {prompt.tags.slice(0, 3).map((tag) => (
          <span key={tag} class="tag-pill">
            #{tag}
          </span>
        ))}
        {prompt.tags.length > 3 && (
          <span class="tag-pill-more">
            +{prompt.tags.length - 3} more
          </span>
        )}
      </div>
    )}
    
    {prompt.variables && prompt.variables.length > 0 && (
      <div class="variables-section mb-4">
        <div class="flex items-center space-x-2 mb-2">
          <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z"></path>
          </svg>
          <p class="text-xs font-medium text-gray-300">Variables ({prompt.variables.length})</p>
        </div>
        <div class="flex flex-wrap gap-1">
          {prompt.variables.slice(0, 4).map((variable) => (
            <span key={variable.name} class={`variable-pill ${variable.required ? 'variable-required' : 'variable-optional'}`}>
              {variable.name}
              {variable.required && <span class="ml-1 text-red-200 text-xs font-bold">*</span>}
            </span>
          ))}
          {prompt.variables.length > 4 && (
            <span class="variable-pill-more">
              +{prompt.variables.length - 4}
            </span>
          )}
        </div>
      </div>
    )}
    
    <div class="flex items-center justify-between border-t border-dark-700/50 pt-4">
      <div class="flex items-center space-x-4 text-xs text-gray-400">
        {prompt.author && (
          <div class="flex items-center space-x-1">
            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
            </svg>
            <span class="font-medium">{prompt.author}</span>
          </div>
        )}
        <div class="flex items-center space-x-1">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <span class="font-medium">{formatDate(prompt.updatedAt)}</span>
        </div>
      </div>
      
      <div class="flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
        <a href={`/prompts/${prompt.id}`} class="action-button view-button" title="View prompt">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
          </svg>
        </a>
        <a href={`/prompts/${prompt.id}/edit`} class="action-button edit-button" title="Edit prompt">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
          </svg>
        </a>
        <button 
          onclick={`deletePrompt('${prompt.id}')`}
          class="action-button delete-button"
          title="Delete prompt"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  /* Base card styles */
  .prompt-card {
    @apply glass-card rounded-xl shadow-lg;
    @apply hover:shadow-xl transition-all duration-300;
    @apply transform hover:scale-[1.02] hover:-translate-y-1;
  }

  .prompt-card::before {
    content: '';
    @apply absolute inset-0 rounded-xl;
    background: linear-gradient(135deg, rgba(14, 165, 233, 0.1) 0%, rgba(168, 85, 247, 0.1) 100%);
    @apply opacity-0 group-hover:opacity-100 transition-opacity duration-300;
  }

  .prompt-card-content {
    @apply relative z-10;
  }

  /* Category badge */
  .category-badge {
    @apply px-3 py-1 text-xs font-bold rounded-full uppercase tracking-wide;
    @apply shadow-md transition-all duration-200 border-0 no-underline;
    @apply inline-block;
  }
  
  .category-badge.work-badge {
    @apply bg-primary-600 text-white;
    @apply hover:bg-primary-700 hover:scale-105;
  }
  
  .category-badge.personal-badge {
    @apply bg-accent-600 text-white;
    @apply hover:bg-accent-700 hover:scale-105;
  }
  
  .category-badge.shared-badge {
    @apply bg-success-600 text-white;
    @apply hover:bg-success-700 hover:scale-105;
  }
  
  .category-badge.default-badge {
    @apply bg-dark-600 text-white;
    @apply hover:bg-dark-700 hover:scale-105;
  }

  /* Tag styles */
  .tag-pill {
    @apply inline-flex items-center px-2 py-1 text-xs font-medium;
    @apply bg-dark-700/50 text-gray-300 rounded-md border border-dark-600/50;
    @apply hover:bg-dark-600/60 hover:border-dark-500/60 transition-colors duration-150;
    @apply cursor-pointer backdrop-blur-sm;
  }

  .tag-pill-more {
    @apply inline-flex items-center px-2 py-1 text-xs font-medium;
    @apply bg-dark-800/50 text-gray-400 rounded-md border border-dark-700/50;
  }

  /* Variable pills */
  .variable-pill {
    @apply inline-flex items-center px-2 py-1 text-xs font-mono;
    @apply rounded border transition-all duration-150;
  }

  .variable-required {
    @apply bg-red-900/30 text-red-300 border-red-700/50;
    @apply hover:bg-red-800/40 hover:border-red-600/60;
  }

  .variable-optional {
    @apply bg-primary-900/30 text-primary-300 border-primary-700/50;
    @apply hover:bg-primary-800/40 hover:border-primary-600/60;
  }

  .variable-pill-more {
    @apply inline-flex items-center px-2 py-1 text-xs font-medium;
    @apply bg-dark-800/50 text-gray-400 rounded border border-dark-700/50;
  }

  /* Action buttons */
  .action-button {
    @apply p-2 rounded-lg transition-all duration-200;
    @apply hover:scale-110 focus:outline-none focus:ring-2 focus:ring-offset-1;
  }

  .view-button {
    @apply text-gray-400 hover:text-gray-200 hover:bg-dark-700/50;
    @apply focus:ring-gray-400;
  }

  .edit-button {
    @apply text-gray-400 hover:text-primary-300 hover:bg-primary-900/30;
    @apply focus:ring-primary-400;
  }

  .delete-button {
    @apply text-gray-400 hover:text-red-300 hover:bg-red-900/30;
    @apply focus:ring-red-400;
  }

  /* Text utilities */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Variables section */
  .variables-section {
    @apply p-3 rounded-lg border bg-dark-800/30 border-dark-700/50;
    backdrop-filter: blur(10px);
    @apply transition-all duration-200;
  }

  /* Hover animations */
  .prompt-card:hover .category-badge {
    @apply transform scale-105;
  }

  .prompt-card:hover .tag-pill {
    @apply transform -translate-y-0.5;
  }

  .prompt-card:hover .variable-pill {
    @apply shadow-sm;
  }

  /* Loading state */
  .prompt-card.loading {
    @apply animate-pulse;
  }

  .prompt-card.loading * {
    @apply bg-gray-200 text-transparent;
  }


  /* Responsive adjustments */
  @media (max-width: 640px) {
    .prompt-card {
      @apply hover:scale-100 hover:translate-y-0;
    }
    
    .action-button {
      @apply opacity-100;
    }
    
    .variables-section {
      @apply p-2;
    }
  }

</style>

<script>
  function deletePrompt(id: string) {
    if (confirm('Are you sure you want to delete this prompt?')) {
      fetch(`/api/prompts/${id}`, { method: 'DELETE' })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            window.location.reload();
          } else {
            alert('Failed to delete prompt');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Failed to delete prompt');
        });
    }
  }
  
  // Make function globally available
  (window as any).deletePrompt = deletePrompt;
</script>
