---
export interface Props {
  prompt: {
    id: string;
    name: string;
    description: string;
    content: string;
    category: string;
    tags: string[];
    author?: string;
    version: string;
    variables?: Array<{
      name: string;
      description: string;
      type: string;
      required: boolean;
      defaultValue?: any;
    }>;
  };
}

const { prompt } = Astro.props;

// Get category color
const getCategoryColor = (category: string) => {
  switch (category) {
    case 'work':
      return 'bg-primary-600 text-white hover:bg-primary-700';
    case 'personal':
      return 'bg-accent-600 text-white hover:bg-accent-700';
    case 'shared':
      return 'bg-success-600 text-white hover:bg-success-700';
    default:
      return 'bg-dark-600 text-white hover:bg-dark-700';
  }
};
---

<div class="prompt-testing-interface">
  <!-- Hero Section with Prompt Testing -->
  <div class="glass-card rounded-2xl shadow-2xl overflow-hidden mb-8">
    <div class="bg-gradient-to-r from-primary-900/20 via-dark-800/30 to-accent-900/20 p-6 border-b border-dark-700/30">
      <div class="flex items-center justify-between mb-4">
        <div class="flex items-center space-x-4">
          <div class="w-12 h-12 bg-gradient-to-br from-primary-500 to-accent-500 rounded-xl flex items-center justify-center shadow-lg">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>
          </div>
          <div>
            <h1 class="text-2xl font-bold text-gray-100">Test Your Prompt</h1>
            <p class="text-gray-400 text-sm mt-1">Enter variables below to see your prompt in action</p>
          </div>
        </div>
        <span class={`px-4 py-2 text-sm font-semibold rounded-full uppercase tracking-wide transition-colors duration-200 cursor-pointer ${getCategoryColor(prompt.category)}`}>
          {prompt.category}
        </span>
      </div>
    </div>

    <!-- Two-Column Layout: Variables on Left, Output on Right -->
    <div class="grid grid-cols-1 lg:grid-cols-2 min-h-[600px]">
      <!-- Variables Panel -->
      <div class="p-6 border-r border-dark-700/30">
        <div class="space-y-6">
          <div class="flex items-center justify-between">
            <h2 class="text-lg font-semibold text-gray-100 flex items-center">
              <svg class="w-5 h-5 mr-2 text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z"></path>
              </svg>
              Variables
            </h2>
            {prompt.variables && prompt.variables.length > 0 && (
              <span class="text-xs text-gray-400 bg-dark-800/50 px-3 py-1 rounded-full border border-dark-700/50">
                {prompt.variables.length} variable{prompt.variables.length !== 1 ? 's' : ''}
              </span>
            )}
          </div>

          {prompt.variables && prompt.variables.length > 0 ? (
            <form id="variable-form" class="space-y-5">
              {prompt.variables.map((variable) => (
                <div key={variable.name} class="variable-input-group">
                  <label for={variable.name} class="block text-sm font-medium text-gray-200 mb-2 flex items-center justify-between">
                    <span class="flex items-center">
                      <code class="text-primary-300 bg-dark-800/50 px-2 py-1 rounded mr-2 text-xs font-mono">
                        {`{{${variable.name}}}`}
                      </code>
                      {variable.required && <span class="text-red-400 text-xs font-bold bg-red-900/30 px-2 py-1 rounded ml-2">Required</span>}
                    </span>
                    <span class={`variable-type-badge ${variable.type}`}>
                      {variable.type}
                    </span>
                  </label>
                  
                  <div class="relative">
                    {variable.type === 'boolean' ? (
                      <select 
                        id={variable.name}
                        name={variable.name}
                        class="variable-input select"
                      >
                        <option value="">Choose value...</option>
                        <option value="true">True</option>
                        <option value="false">False</option>
                      </select>
                    ) : variable.type === 'array' ? (
                      <textarea 
                        id={variable.name}
                        name={variable.name}
                        rows="4"
                        placeholder="Enter array items, one per line"
                        class="variable-input textarea"
                      ></textarea>
                    ) : (
                      <input 
                        type={variable.type === 'number' ? 'number' : 'text'}
                        id={variable.name}
                        name={variable.name}
                        placeholder={variable.defaultValue ? `Default: ${variable.defaultValue}` : `Enter ${variable.name}...`}
                        class="variable-input"
                      />
                    )}
                  </div>
                  
                  {variable.description && (
                    <p class="mt-2 text-xs text-gray-400 leading-relaxed">
                      {variable.description}
                    </p>
                  )}
                  
                  {variable.defaultValue && (
                    <div class="mt-2">
                      <span class="text-xs text-gray-500">Default: </span>
                      <code class="text-xs bg-dark-700/50 text-gray-300 px-2 py-1 rounded border border-dark-600/50">
                        {variable.defaultValue}
                      </code>
                    </div>
                  )}
                </div>
              ))}
              
              <!-- Preset Management -->
              <div class="pt-4 border-t border-dark-700/30">
                <div class="flex items-center justify-between mb-3">
                  <h3 class="text-sm font-medium text-gray-300 flex items-center">
                    <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z"></path>
                    </svg>
                    Presets
                  </h3>
                </div>
                
                <div class="flex items-center space-x-2 mb-3">
                  <select id="preset-select" class="flex-1 bg-dark-800 border border-dark-600 text-gray-300 text-sm rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary-500 focus:border-transparent">
                    <option value="">Select a preset...</option>
                  </select>
                  <button type="button" id="load-preset-btn" class="px-3 py-2 bg-dark-800 border border-dark-600 text-gray-400 hover:text-gray-300 rounded-lg text-sm hover:bg-dark-700 transition-colors" title="Load preset">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"></path>
                    </svg>
                  </button>
                  <button type="button" id="delete-preset-btn" class="px-3 py-2 bg-red-900/30 border border-red-700/50 text-red-400 hover:text-red-300 rounded-lg text-sm hover:bg-red-800/40 transition-colors" title="Delete preset">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                  </button>
                </div>
                
                <div class="flex items-center space-x-2 mb-4">
                  <input type="text" id="preset-name" placeholder="Enter preset name..." class="flex-1 bg-dark-800 border border-dark-600 text-gray-300 text-sm rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary-500 focus:border-transparent">
                  <button type="button" id="save-preset-btn" class="px-3 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg text-sm transition-colors" title="Save current values as preset">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3-3m0 0l-3 3m3-3v12"></path>
                    </svg>
                    Save
                  </button>
                </div>
              </div>
              
              <div class="flex space-x-3 pt-4 border-t border-dark-700/30">
                <button 
                  type="button"
                  id="render-btn"
                  class="btn-primary flex-1"
                >
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                  </svg>
                  Render Now
                </button>
                <button 
                  type="button"
                  id="clear-btn"
                  class="btn-secondary"
                >
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1 1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                  Clear
                </button>
              </div>
            </form>
          ) : (
            <div class="text-center py-12">
              <svg class="w-16 h-16 mx-auto text-gray-600 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              <p class="text-gray-400 text-sm">This prompt has no variables to configure</p>
              <p class="text-gray-500 text-xs mt-1">The output will show the raw prompt content</p>
            </div>
          )}
        </div>
      </div>

      <!-- Live Output Panel -->
      <div class="p-6 bg-dark-900/30">
        <div class="h-full flex flex-col">
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-lg font-semibold text-gray-100 flex items-center">
              <svg class="w-5 h-5 mr-2 text-accent-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122"></path>
              </svg>
              Live Preview
            </h2>
            <div class="flex space-x-2">
              <button 
                id="copy-btn"
                class="btn-secondary text-xs px-3 py-2"
                title="Copy to clipboard"
              >
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                </svg>
                Copy
              </button>
              <button 
                id="share-btn"
                class="btn-secondary text-xs px-3 py-2"
                title="Share this prompt with variables"
              >
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
                </svg>
                Share
              </button>
              <button 
                id="export-btn"
                class="btn-secondary text-xs px-3 py-2"
                title="Export as file"
              >
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z"></path>
                </svg>
                Export
              </button>
            </div>
          </div>
          
          <div class="flex-1 relative">
            <div class="output-container h-full">
              <div id="rendered-content" class="output-text">
                {prompt.content}
              </div>
            </div>
            
            <div id="copy-success" class="absolute top-4 right-4 bg-success-500 text-white px-4 py-2 rounded-lg shadow-lg text-sm font-medium opacity-0 transition-all duration-300 transform translate-y-2">
              <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              Copied to clipboard!
            </div>
          </div>
          
          <!-- Word Count & Stats -->
          <div class="flex items-center justify-between pt-4 border-t border-dark-700/30 text-xs text-gray-500">
            <div class="flex items-center space-x-4">
              <span id="word-count">Words: 0</span>
              <span id="char-count">Characters: 0</span>
            </div>
            <div id="last-updated" class="text-gray-600">
              Auto-updating...
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Original Prompt Reference -->
  <div class="glass-card rounded-xl p-6">
    <div class="flex items-center justify-between mb-4">
      <h2 class="text-lg font-semibold text-gray-100 flex items-center">
        <svg class="w-5 h-5 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        Original Template
      </h2>
      <button 
        id="toggle-original"
        class="text-xs text-gray-400 hover:text-gray-300 transition-colors duration-200"
      >
        <span id="toggle-text">Show</span>
        <svg class="w-4 h-4 ml-1 inline transform transition-transform duration-200" id="toggle-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </button>
    </div>
    
    <div id="original-content" class="hidden">
      <div class="bg-dark-800/50 border border-dark-700/30 rounded-lg p-4">
        <pre class="whitespace-pre-wrap text-sm text-gray-300 font-mono leading-relaxed">{prompt.content}</pre>
      </div>
    </div>
  </div>
</div>

<!-- Enhanced Styles -->
<style>
  /* Main Interface Styles */
  .prompt-testing-interface {
    @apply max-w-6xl mx-auto;
  }

  .glass-card {
    @apply bg-dark-900/30 backdrop-blur-sm border border-dark-700/50 shadow-2xl;
  }

  /* Variable Input Styles */
  .variable-input-group {
    @apply p-4 bg-dark-800/20 border border-dark-700/30 rounded-xl hover:border-dark-600/50 transition-all duration-200;
  }

  .variable-input {
    @apply block w-full px-4 py-3 bg-dark-800/50 border border-dark-600/50 rounded-lg text-gray-100 placeholder-gray-500;
    @apply focus:outline-none focus:ring-2 focus:ring-primary-500/50 focus:border-primary-500/50 transition-all duration-200;
    @apply hover:bg-dark-700/50 hover:border-dark-500/50;
  }

  .variable-input.textarea {
    @apply resize-y min-h-[100px] font-mono text-sm leading-relaxed;
  }

  .variable-input.select {
    @apply cursor-pointer;
  }

  /* Variable Type Badges */
  .variable-type-badge {
    @apply px-3 py-1 text-xs font-medium rounded-full uppercase tracking-wide;
  }

  .variable-type-badge.string {
    @apply bg-primary-900/40 text-primary-300 border border-primary-700/50;
  }

  .variable-type-badge.number {
    @apply bg-success-900/40 text-success-300 border border-success-700/50;
  }

  .variable-type-badge.boolean {
    @apply bg-accent-900/40 text-accent-300 border border-accent-700/50;
  }

  .variable-type-badge.array {
    @apply bg-warning-900/40 text-warning-300 border border-warning-700/50;
  }

  /* Button Styles */
  .btn-primary {
    @apply inline-flex items-center justify-center px-6 py-3 text-sm font-semibold rounded-lg;
    @apply bg-gradient-to-r from-primary-600 to-primary-700 text-white border border-primary-500/50;
    @apply hover:from-primary-700 hover:to-primary-800 hover:border-primary-400/50 hover:shadow-lg hover:shadow-primary-500/25;
    @apply focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 focus:ring-offset-dark-900;
    @apply transition-all duration-200 transform hover:scale-105 active:scale-95;
  }

  .btn-secondary {
    @apply inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-lg;
    @apply bg-dark-800/60 text-gray-300 border border-dark-600/50;
    @apply hover:bg-dark-700/70 hover:text-gray-200 hover:border-dark-500/50 hover:shadow-md;
    @apply focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-dark-500 focus:ring-offset-dark-900;
    @apply transition-all duration-200;
  }

  /* Output Container Styles */
  .output-container {
    @apply bg-dark-800/40 border border-dark-700/40 rounded-xl p-6 overflow-hidden;
    @apply backdrop-blur-sm shadow-inner;
  }

  .output-text {
    @apply whitespace-pre-wrap text-sm text-gray-200 font-mono leading-relaxed;
    @apply min-h-[400px] max-h-[500px] overflow-y-auto;
  }

  /* Responsive Adjustments */
  @media (max-width: 1024px) {
    .prompt-testing-interface .grid {
      @apply grid-cols-1;
    }
    
    .prompt-testing-interface .border-r {
      @apply border-r-0 border-b border-dark-700/30;
    }
    
    .output-text {
      @apply min-h-[300px] max-h-[400px];
    }
  }

  /* Animation Classes */
  .fade-in {
    @apply opacity-0 animate-fade-in;
  }

  .slide-up {
    @apply transform translate-y-4 opacity-0;
    transition: all 0.3s ease-out;
  }

  .slide-up.active {
    @apply translate-y-0 opacity-100;
  }

  /* Success Toast Styling */
  #copy-success.show {
    @apply opacity-100 translate-y-0;
  }

  /* Custom Scrollbar */
  .output-text::-webkit-scrollbar {
    width: 6px;
  }

  .output-text::-webkit-scrollbar-track {
    background: rgba(55, 65, 81, 0.5);
  }

  .output-text::-webkit-scrollbar-thumb {
    background: rgba(75, 85, 99, 0.8);
    border-radius: 3px;
  }

  .output-text::-webkit-scrollbar-thumb:hover {
    background: rgba(107, 114, 128, 0.9);
  }
</style>

<script define:vars={{ prompt }}>
  document.addEventListener('DOMContentLoaded', () => {
    const variableForm = document.getElementById('variable-form');
    const renderBtn = document.getElementById('render-btn');
    const clearBtn = document.getElementById('clear-btn');
    const copyBtn = document.getElementById('copy-btn');
    const shareBtn = document.getElementById('share-btn');
    const exportBtn = document.getElementById('export-btn');
    const renderedContent = document.getElementById('rendered-content');
    const copySuccess = document.getElementById('copy-success');
    const toggleOriginal = document.getElementById('toggle-original');
    const originalContent = document.getElementById('original-content');
    const toggleText = document.getElementById('toggle-text');
    const toggleIcon = document.getElementById('toggle-icon');
    const wordCount = document.getElementById('word-count');
    const charCount = document.getElementById('char-count');
    const lastUpdated = document.getElementById('last-updated');
    
    // Preset management elements
    const presetSelect = document.getElementById('preset-select');
    const presetName = document.getElementById('preset-name');
    const savePresetBtn = document.getElementById('save-preset-btn');
    const loadPresetBtn = document.getElementById('load-preset-btn');
    const deletePresetBtn = document.getElementById('delete-preset-btn');
    
    // Local storage key for presets
    const presetsKey = `prompt_presets_${prompt.id}`;

    // Auto-render on page load and form changes
    const autoRender = () => {
      setTimeout(() => {
        renderPrompt();
        updateStats();
        updateTimestamp();
      }, 100);
    };

    // Render button click with visual feedback
    renderBtn?.addEventListener('click', () => {
      renderBtn.classList.add('animate-pulse');
      renderPrompt();
      updateStats();
      updateTimestamp();
      setTimeout(() => {
        renderBtn.classList.remove('animate-pulse');
      }, 500);
    });

    // Clear button click with confirmation and animation
    clearBtn?.addEventListener('click', () => {
      if (variableForm) {
        // Add slide-up animation
        const inputs = variableForm.querySelectorAll('.variable-input');
        inputs.forEach((input, index) => {
          setTimeout(() => {
            input.value = '';
            input.classList.add('slide-up');
            setTimeout(() => input.classList.remove('slide-up'), 300);
          }, index * 50);
        });
        
        setTimeout(() => {
          variableForm.reset();
          renderPrompt();
          updateStats();
          updateTimestamp();
        }, inputs.length * 50 + 100);
      }
    });

    // Auto-render on input change with debouncing
    if (variableForm) {
      let debounceTimer;
      const inputs = variableForm.querySelectorAll('input, select, textarea');
      inputs.forEach(input => {
        const handleInput = () => {
          clearTimeout(debounceTimer);
          debounceTimer = setTimeout(autoRender, 300);
        };
        
        input.addEventListener('input', handleInput);
        input.addEventListener('change', handleInput);
        
        // Add focus effects
        input.addEventListener('focus', () => {
          input.parentElement.parentElement.classList.add('ring-2', 'ring-primary-500/30');
        });
        
        input.addEventListener('blur', () => {
          input.parentElement.parentElement.classList.remove('ring-2', 'ring-primary-500/30');
        });
      });
    }

    // Enhanced copy functionality with better visual feedback
    copyBtn?.addEventListener('click', async () => {
      const content = renderedContent.textContent || '';
      
      try {
        await navigator.clipboard.writeText(content);
        showCopySuccess();
      } catch (err) {
        console.error('Failed to copy text: ', err);
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = content;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
          document.execCommand('copy');
          showCopySuccess();
        } catch (fallbackErr) {
          console.error('Fallback copy failed: ', fallbackErr);
          alert('Failed to copy to clipboard. Please select the text manually.');
        }
        
        document.body.removeChild(textArea);
      }
    });

    // Export with better file naming and metadata
    exportBtn?.addEventListener('click', () => {
      const content = renderedContent.textContent || '';
      const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
      const filename = `${prompt.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_${timestamp}.txt`;
      
      // Add metadata header
      const metadata = [
        `# ${prompt.name}`,
        `# Category: ${prompt.category}`,
        `# Generated: ${new Date().toLocaleString()}`,
        `# Variables: ${prompt.variables?.length || 0}`,
        '',
        content
      ].join('\n');
      
      const blob = new Blob([metadata], { type: 'text/plain;charset=utf-8' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      a.style.display = 'none';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      // Show export success
      const exportSuccess = document.createElement('div');
      exportSuccess.className = 'fixed bottom-4 right-4 bg-success-500 text-white px-4 py-2 rounded-lg shadow-lg text-sm font-medium z-50';
      exportSuccess.innerHTML = `
        <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3"></path>
        </svg>
        Exported successfully!
      `;
      document.body.appendChild(exportSuccess);
      setTimeout(() => {
        exportSuccess.remove();
      }, 3000);
    });

    // Toggle original content
    toggleOriginal?.addEventListener('click', () => {
      const isHidden = originalContent.classList.contains('hidden');
      
      if (isHidden) {
        originalContent.classList.remove('hidden');
        originalContent.classList.add('slide-up');
        toggleText.textContent = 'Hide';
        toggleIcon.style.transform = 'rotate(180deg)';
        setTimeout(() => {
          originalContent.classList.add('active');
        }, 10);
      } else {
        originalContent.classList.remove('active');
        toggleText.textContent = 'Show';
        toggleIcon.style.transform = 'rotate(0deg)';
        setTimeout(() => {
          originalContent.classList.add('hidden');
          originalContent.classList.remove('slide-up');
        }, 300);
      }
    });

    // Enhanced render function
    function renderPrompt() {
      let content = prompt.content;
      const variables = prompt.variables || [];

      if (variableForm && variables.length > 0) {
        const formData = new FormData(variableForm);

        variables.forEach(variable => {
          const value = formData.get(variable.name)?.toString() || '';
          let substitutionValue = value || variable.defaultValue || `{{${variable.name}}}`;

          // Handle different variable types with better formatting
          if (variable.type === 'array' && value) {
            const items = value.split('\n').filter(item => item.trim());
            substitutionValue = items.length > 1 ? items.join(', ') : items[0] || `{{${variable.name}}}`;
          } else if (variable.type === 'boolean') {
            substitutionValue = value === 'true' ? 'true' : value === 'false' ? 'false' : `{{${variable.name}}}`;
          } else if (variable.type === 'number' && value) {
            substitutionValue = parseFloat(value).toString();
          }

          // Replace all occurrences with improved regex
          const regex = new RegExp(`{{\\s*${variable.name.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\s*}}`, 'g');
          content = content.replace(regex, substitutionValue);
        });
      }

      if (renderedContent) {
        renderedContent.textContent = content;
        // Add gentle fade effect
        renderedContent.classList.add('fade-in');
        setTimeout(() => {
          renderedContent.classList.remove('fade-in');
        }, 500);
      }
    }

    // Update word and character counts
    function updateStats() {
      const content = renderedContent?.textContent || '';
      const words = content.trim() ? content.trim().split(/\s+/).length : 0;
      const chars = content.length;
      
      if (wordCount) wordCount.textContent = `Words: ${words}`;
      if (charCount) charCount.textContent = `Characters: ${chars}`;
    }

    // Update timestamp
    function updateTimestamp() {
      if (lastUpdated) {
        lastUpdated.textContent = `Updated: ${new Date().toLocaleTimeString()}`;
      }
    }

    // Show copy success with animation
    function showCopySuccess() {
      copySuccess.classList.add('show');
      setTimeout(() => {
        copySuccess.classList.remove('show');
      }, 2000);
    }

    // Initialize with slide-in animations
    setTimeout(() => {
      const elements = document.querySelectorAll('.variable-input-group');
      elements.forEach((el, index) => {
        setTimeout(() => {
          el.classList.add('slide-up', 'active');
        }, index * 100);
      });
    }, 200);

    // ==== PRESET MANAGEMENT ====
    
    // Load presets from localStorage
    function loadPresets() {
      try {
        const presets = JSON.parse(localStorage.getItem(presetsKey) || '{}');
        return presets;
      } catch {
        return {};
      }
    }
    
    // Save presets to localStorage
    function savePresets(presets) {
      localStorage.setItem(presetsKey, JSON.stringify(presets));
    }
    
    // Get current form values
    function getCurrentVariables() {
      if (!variableForm) return {};
      const formData = new FormData(variableForm);
      const variables = {};
      for (const [key, value] of formData.entries()) {
        variables[key] = value;
      }
      return variables;
    }
    
    // Set form values from variables
    function setCurrentVariables(variables) {
      if (!variableForm) return;
      Object.entries(variables).forEach(([key, value]) => {
        const input = variableForm.querySelector(`[name="${key}"]`);
        if (input) {
          input.value = value;
          // Trigger change event for auto-render
          input.dispatchEvent(new Event('change'));
        }
      });
    }
    
    // Update preset dropdown
    function updatePresetDropdown() {
      if (!presetSelect) return;
      const presets = loadPresets();
      
      // Clear existing options except the first one
      presetSelect.innerHTML = '<option value="">Select a preset...</option>';
      
      Object.entries(presets).forEach(([name, data]) => {
        const option = document.createElement('option');
        option.value = name;
        option.textContent = `${name} (${new Date(data.savedAt).toLocaleDateString()})`;
        presetSelect.appendChild(option);
      });
    }
    
    // Save preset
    savePresetBtn?.addEventListener('click', () => {
      const name = presetName?.value.trim();
      if (!name) {
        alert('Please enter a preset name');
        return;
      }
      
      const variables = getCurrentVariables();
      const presets = loadPresets();
      
      presets[name] = {
        variables,
        savedAt: new Date().toISOString(),
        promptId: prompt.id,
        promptName: prompt.name
      };
      
      savePresets(presets);
      updatePresetDropdown();
      presetName.value = '';
      
      // Show success message
      showNotification(`Preset "${name}" saved successfully!`, 'success');
    });
    
    // Load preset
    loadPresetBtn?.addEventListener('click', () => {
      const selectedName = presetSelect?.value;
      if (!selectedName) {
        alert('Please select a preset to load');
        return;
      }
      
      const presets = loadPresets();
      const preset = presets[selectedName];
      
      if (preset) {
        setCurrentVariables(preset.variables);
        showNotification(`Preset "${selectedName}" loaded!`, 'success');
      }
    });
    
    // Delete preset
    deletePresetBtn?.addEventListener('click', () => {
      const selectedName = presetSelect?.value;
      if (!selectedName) {
        alert('Please select a preset to delete');
        return;
      }
      
      if (confirm(`Are you sure you want to delete the preset "${selectedName}"?`)) {
        const presets = loadPresets();
        delete presets[selectedName];
        savePresets(presets);
        updatePresetDropdown();
        presetSelect.value = '';
        showNotification(`Preset "${selectedName}" deleted`, 'info');
      }
    });
    
    // ==== SHARING FUNCTIONALITY ====
    
    shareBtn?.addEventListener('click', () => {
      const variables = getCurrentVariables();
      const shareData = {
        promptId: prompt.id,
        variables
      };
      
      // Create shareable URL
      const url = new URL(window.location);
      url.searchParams.set('vars', btoa(JSON.stringify(variables)));
      
      // Copy to clipboard
      navigator.clipboard.writeText(url.toString()).then(() => {
        showNotification('Shareable link copied to clipboard!', 'success');
      }).catch(() => {
        // Fallback - show in a modal
        const modal = createShareModal(url.toString());
        document.body.appendChild(modal);
      });
    });
    
    // Load variables from URL on page load
    function loadVariablesFromURL() {
      const urlParams = new URLSearchParams(window.location.search);
      const varsParam = urlParams.get('vars');
      
      if (varsParam) {
        try {
          const variables = JSON.parse(atob(varsParam));
          setCurrentVariables(variables);
          showNotification('Variables loaded from shared link!', 'info');
          
          // Clean URL without reloading page
          const cleanUrl = new URL(window.location);
          cleanUrl.searchParams.delete('vars');
          window.history.replaceState({}, document.title, cleanUrl.toString());
        } catch (error) {
          console.error('Failed to load variables from URL:', error);
        }
      }
    }
    
    // Create share modal (fallback)
    function createShareModal(url) {
      const modal = document.createElement('div');
      modal.className = 'fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50';
      modal.innerHTML = `
        <div class="bg-dark-800 border border-dark-600 rounded-xl p-6 max-w-md w-full mx-4 shadow-2xl">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-100">Share This Prompt</h3>
            <button class="text-gray-400 hover:text-gray-200 p-1" onclick="this.closest('.fixed').remove()">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          <p class="text-gray-300 text-sm mb-4">Copy this link to share the prompt with current variable values:</p>
          <div class="bg-dark-900 border border-dark-700 rounded-lg p-3 mb-4">
            <code class="text-xs text-gray-200 break-all">${url}</code>
          </div>
          <div class="flex space-x-3">
            <button onclick="navigator.clipboard.writeText('${url}').then(() => { showNotification('Link copied!', 'success'); this.closest('.fixed').remove(); })" class="flex-1 bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
              Copy Link
            </button>
            <button onclick="this.closest('.fixed').remove()" class="px-4 py-2 bg-dark-700 hover:bg-dark-600 text-gray-300 rounded-lg text-sm font-medium transition-colors">
              Close
            </button>
          </div>
        </div>
      `;
      
      // Close on background click
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.remove();
        }
      });
      
      return modal;
    }
    
    // Notification system
    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      const colors = {
        success: 'bg-success-500',
        error: 'bg-red-500', 
        info: 'bg-blue-500',
        warning: 'bg-amber-500'
      };
      
      notification.className = `fixed top-4 right-4 ${colors[type]} text-white px-4 py-2 rounded-lg shadow-lg text-sm font-medium z-50 transform transition-all duration-300 translate-x-full opacity-0`;
      notification.innerHTML = `
        <div class="flex items-center">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          ${message}
        </div>
      `;
      
      document.body.appendChild(notification);
      
      // Animate in
      setTimeout(() => {
        notification.classList.remove('translate-x-full', 'opacity-0');
      }, 100);
      
      // Auto remove
      setTimeout(() => {
        notification.classList.add('translate-x-full', 'opacity-0');
        setTimeout(() => {
          notification.remove();
        }, 300);
      }, 3000);
    }
    
    // Initialize preset system
    updatePresetDropdown();
    loadVariablesFromURL();
    
    // Initial render
    autoRender();
  });
</script>
