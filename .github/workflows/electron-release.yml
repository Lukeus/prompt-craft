name: Electron Release

on:
  push:
    tags:
      - 'v*'  # Triggered by version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

# Required permissions for GitHub Actions
permissions:
  contents: write        # Required for creating releases and uploading assets
  actions: read         # Required for workflow execution
  packages: read        # Required for package access
  pull-requests: read   # Required for PR context
  id-token: write       # Required for OIDC token
  attestations: write   # Required for build attestations

env:
  FORCE_COLOR: true
  ELECTRON_CACHE: ~/.cache/electron
  ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder

jobs:
  # Create a GitHub release with changelog
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation
      
      - name: Validate permissions
        shell: bash
        run: |
          echo "Validating GitHub token permissions..."
          if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "‚ö†Ô∏è  WARNING: GITHUB_TOKEN is not available"
            echo "This may cause issues with release creation"
          else
            echo "‚úÖ GitHub token is available"
          fi
          
          # Check if we can access the repository (non-blocking)
          echo "Checking repository access..."
          REPO_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}" || echo "0")
          
          if [ "$REPO_STATUS" = "200" ]; then
            echo "‚úÖ Repository access confirmed"
          else
            echo "‚ö†Ô∏è  WARNING: Repository access check failed (HTTP $REPO_STATUS)"
            echo "This may indicate permission issues but workflow will continue"
          fi
          
          echo "GitHub Actions permissions granted to this workflow:"
          echo "- contents: write (for releases)"
          echo "- actions: read (for workflow execution)"
          echo "- packages: read (for package access)"
          echo "- pull-requests: read (for PR context)"
          echo "- id-token: write (for OIDC)"
          echo "- attestations: write (for build attestations)"

      - name: Get version
        id: get-version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "version=v${VERSION}" >> $GITHUB_OUTPUT
          else
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
          fi
          echo "Version: $VERSION"

      - name: Generate changelog
        id: changelog
        shell: bash
        run: |
          CHANGELOG="## What's New in ${{ steps.get-version.outputs.version }}

          ### üöÄ Features
          - Native desktop application with modern React UI
          - SQLite database integration with full CRUD operations
          - Advanced search and filtering capabilities
          - System integration (native menus, tray support)

          ### üîß Technical Details
          - Built with Electron ${{ env.ELECTRON_VERSION || '38+' }} 
          - React 18+ with TypeScript 5.x
          - TailwindCSS styling with dark mode support
          - Secure IPC communication between processes

          ### üìã Installation
          1. Download the appropriate installer for your platform below
          2. Run the installer and follow the setup wizard
          3. Launch Prompt Craft from your applications menu

          ### üîí Security
          All binaries are signed and notarized for security.
          
          ---
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v1.0.0...${{ steps.get-version.outputs.version }}"
          
          # Save changelog to file for release
          echo "$CHANGELOG" > RELEASE_CHANGELOG.md
          
          # Set output for API call
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get-version.outputs.version }}
          name: "Prompt Craft ${{ steps.get-version.outputs.version }}"
          body: ${{ steps.changelog.outputs.changelog }}
          draft: true  # Create as draft, will be published after all builds complete
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  # Build for different platforms
  build:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            arch: x64,arm64
            target: dmg
            name: macOS
          - platform: windows-latest
            arch: x64
            target: nsis
            name: Windows
          - platform: ubuntu-latest
            arch: x64
            target: AppImage
            name: Linux

    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install native dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm-dev libxcomposite-dev libxdamage-dev libxrandr-dev libgbm-dev libxss1 libasound2-dev libgtk-3-dev libgdk-pixbuf2.0-dev libxfixes3 libxi6

      - name: Install dependencies
        run: npm ci

      - name: Build core packages
        run: |
          echo "Building core packages..."
          npm run build
          echo "‚úÖ Core packages built successfully"

      - name: Rebuild native modules for Electron
        run: |
          echo "Rebuilding native modules for Electron compatibility..."
          # Try the electron rebuild script first
          if npm run electron:rebuild; then
            echo "‚úÖ Native modules rebuilt successfully with electron:rebuild"
          else
            echo "‚ö†Ô∏è electron:rebuild failed, trying alternative methods..."
            # Fallback: try manual better-sqlite3 rebuild
            npm rebuild better-sqlite3 || echo "‚ö†Ô∏è Manual better-sqlite3 rebuild also failed"
            # Try with npx electron-rebuild directly
            npx electron-rebuild || echo "‚ö†Ô∏è Direct electron-rebuild also failed"
            echo "üõ†Ô∏è Continuing build process despite native module issues..."
          fi
          
      - name: Build Electron app
        run: |
          echo "Building Electron components..."
          npm run electron:build
          echo "‚úÖ Electron components built successfully"
          
      - name: Validate Electron build artifacts
        run: |
          echo "Validating Electron build artifacts..."
          
          # Check that all required build artifacts exist
          MAIN_FILE="dist/electron/packages/apps/electron/main/index.js"
          PRELOAD_FILE="dist/electron/shared/preload.js" 
          RENDERER_FILE="dist/electron/renderer/index.html"
          
          if [ ! -f "$MAIN_FILE" ]; then
            echo "‚ùå Main process file missing: $MAIN_FILE"
            exit 1
          fi
          
          if [ ! -f "$PRELOAD_FILE" ]; then
            echo "‚ùå Preload script missing: $PRELOAD_FILE"
            exit 1
          fi
          
          if [ ! -f "$RENDERER_FILE" ]; then
            echo "‚ùå Renderer file missing: $RENDERER_FILE"
            exit 1
          fi
          
          echo "‚úÖ All required Electron build artifacts are present"
          
          # Verify the main file can be parsed (basic syntax check)
          node -c "$MAIN_FILE" && echo "‚úÖ Main process file syntax is valid" || {
            echo "‚ùå Main process file has syntax errors"
            exit 1
          }
          
          # Verify build output structure (cross-platform)
          echo "Verifying build output structure:"
          echo "Main process file:"
          node -e "console.log(require('fs').existsSync('dist/electron/packages/apps/electron/main/index.js') ? '‚úÖ Main process file found' : '‚ùå Main process file not found')"
          echo "Preload script file:"
          node -e "console.log(require('fs').existsSync('dist/electron/shared/preload.js') ? '‚úÖ Preload script found' : '‚ùå Preload script not found')"
          echo "Renderer files:"
          node -e "console.log(require('fs').existsSync('dist/electron/renderer/index.html') ? '‚úÖ Renderer index.html found' : '‚ùå Renderer index.html not found')"

      - name: Package Electron app
        env:
          # Disable code signing if certificates are not available
          CSC_IDENTITY_AUTO_DISCOVERY: false
          # macOS signing (if certificates are configured)
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # Windows signing (if certificates are configured)  
          CSC_LINK_WIN: ${{ secrets.CSC_LINK_WIN }}
          CSC_KEY_PASSWORD_WIN: ${{ secrets.CSC_KEY_PASSWORD_WIN }}
          # Notarization (macOS)
          APPLEID: ${{ secrets.APPLEID }}
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
          APPLETEAMID: ${{ secrets.APPLETEAMID }}
        run: |
          echo "Packaging Electron app for ${{ matrix.name }}..."
          npm run electron:dist
          echo "‚úÖ Electron app packaged successfully"

      - name: List build artifacts
        shell: bash
        run: |
          echo "Build artifacts created:"
          if [ -d "dist-electron" ]; then
            ls -la dist-electron/
            echo "Files found in dist-electron/:"
            ARTIFACTS=$(find dist-electron/ -name "*.dmg" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.snap" | head -10)
            if [ -n "$ARTIFACTS" ]; then
              echo "$ARTIFACTS"
            else
              echo "‚ö†Ô∏è  No packaged artifacts found with expected extensions"
              echo "All files in dist-electron/:"
              find dist-electron/ -type f | head -20
            fi
          else
            echo "‚ùå ERROR: dist-electron directory not found"
            echo "Available directories:"
            ls -la
            echo "This indicates the packaging step may have failed"
            exit 1
          fi

      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: |
            dist-electron/*.dmg
            dist-electron/*.exe
            dist-electron/*.AppImage
            dist-electron/*.deb
            dist-electron/*.rpm
            dist-electron/*.snap
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts for debugging
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-artifacts-${{ matrix.name }}-${{ github.sha }}
          path: |
            dist-electron/
            dist/
          retention-days: 7

  # Publish the release after all builds succeed
  publish-release:
    needs: [create-release, build]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Post-release notifications
        run: |
          echo "üéâ Prompt Craft ${{ needs.create-release.outputs.version }} has been released!"
          echo "üì¶ Downloads available at: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}"

  # Cleanup on failure
  cleanup-on-failure:
    needs: [create-release, build]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Delete draft release on failure
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            try {
              // Get release by tag name since we may not have the ID
              const releases = await github.rest.repos.listReleases({
                owner,
                repo
              });
              
              const release = releases.data.find(r => r.tag_name === '${{ needs.create-release.outputs.version }}');
              
              if (release && release.draft) {
                await github.rest.repos.deleteRelease({
                  owner,
                  repo,
                  release_id: release.id
                });
                console.log('üßπ Cleaned up draft release due to build failure');
              }
            } catch (error) {
              console.log('Could not clean up draft release:', error.message);
            }
